@startuml

title Well plate reader - class diagram - drawed by Gert van Lagen

'skinparam classAttributeIconSize 0

'-------------------------------------------------------------main.py

package main.py #AAAAAA {
	class MainWindow #ffff55  {
		+ settings = QSettings
		+ settings_batch = QSettings
		+ Well_Map: numpy.array
		+ Well_Targets: numpy.array
		+ __init__(self)
		+ msg(self, message)
		+ wait_ms(self, milliseconds)
		+ createBatchGroupBox(self): self.batchGroupBox
		+ createManualGroupBox(self): self.manualGroupBox
		+ createLogWindow(self): self.logGroupBox
		+ setBatchWindow(self)
		+ setFullWindow(self)
		+ wellInitialisation(self)
		+ getSec(self, time_str)
		+ openSettingsIniFile(self)
		+ openBatchIniFile(self)
		'
		--Signals--
		+ signals: signalClass
		'
		--Slots--
		+ LogWindowInsert(self, message)
		+ doxygen(self)
		+ closeEvent(self, event)
	}

	class Scanner #FF55FF {
		+ preview: numpy.array
		+ capture: numpy.array
		+ positioner_msg: str
    	+ batchrun_msg: str
		+ __init__(self)
		+ createVideoWindow(self)
		+ msg(self, message)
		'
		--Signals--
		+ signals: signalClass
		'
		--Slots--
		+ reader(self)
		+ snapshotRequestedPositioner(self, message)
		+ snapshotPositioner(self)
		+ snapshotRequestedBatchrun(self, message)
		+ snapshotBatchrun(self)
		+ prvUpdate(self, image=None)
		+ capUpdate(self, image=None)
		+ set_displaytarget(self, target_information)
		+ set_displaywell(self, target_information)
	}
}

'-------------------------------------------------------------serial_printhat.py
package serial_printhat.py #AAAAAA {
	class GcodeSerial #ffff55 {
		+ ins: int
		+ connectionState: bool
		+ __init__(self)
		+ msg(self, message)
		+ getConnectionState(self): self.connectionState
		+ setConnectionState(self, conState)
		+ connect(self, port)
		+ executeGcode(self, gcode_string)
		+ readPort(self)
		+ wait_ms(self, milliseconds)
		+ disconnect(self)
		'
		--Signals--
		+ signals: signalClass
	}
}

'-------------------------------------------------------------
package batch_processor.py #AAAAAA {
	class BatchProcessor #FF5555 {
		+ well_positioner = StepperWellPositioning
    	+ Well_Map = MainWindown.Well_Map
    	+ Well_Targets = MainWindow.Well_Targets	
		'
		+ __init__(self, well_controller, well_map, well_targets, ID, info, dur, interl)
		+ msg(self, message)
		+ startBatch(self)
		+ runBatch(self)
		+ wait_ms(self, milliseconds)
		+ snapshot_request(self, message)
		+ snapshot_await(self)
		'
		--Signals--
		+ signals: signalClass
		'
		--Slots--
		+ snapshot_confirmed(self)
		+ stopBatch(self)
		+ close(self)
	}
}
'-------------------------------------------------------------
package stepper.py #AAAAAA {
	class StepperControl #55FF55 {
		- self.position_x: float
		- self.position_y: float
		+__init__(self)
		+ msg(self, message)
		+ getPositionX(self): self.position_x
		+ getPositionY(self): self.position_y
		+ setPositionX(self, x_pos)
		+ setPositionY(self, y_pos)
		'
		--Signals--
		+ signals: signalClass
		'
		--Slots--
		+ getPositionFromSTM(self)
		+ homeXY(self)
		+ gotoXY(self, x_pos, y_pos)
		+ moveToWell(self, column, row):
		+ turnUp(self)
		+ turnLeft(self)
		+ turnRight(self)
		+ turnDown(self)
		+ firmwareRestart(self)
		+ emergencyBreak(self)
	}

	class StepperWellPositioning #5555FF {
		+ stepper_control: StepperControl
		+ current_well_row: float
    	+ current_well_column: float
		+ GeneralEventLoop: QEventLoop
		+ __init__(self, steppers, Well_data)
		+ msg(self, message)
		+ reset_current_well(self)
		+ set_current_well(self, column, row)
		+ get_current_well(self): self.current_well_column, self.current_well_row
		+ wait_ms(self, milliseconds)
		+ snapshot_request(self)
		+ snapshot_await(self)
		'
		--Signals--
		+ signals: signalClass
		'
		--Slots--
		+ goto_well(self, row, column)
		+ goto_target(self)
		+ snapshot_confirmed(self, snapshot)
		+ setProcessInactive(self)
		+ setProcessActive(self)
		+ close(self)
		
	}	
}

package PiCam.py #AAAAAA {
	class PiYArray #55FF55 {
		+ __init__(self, camera, size)
		+ flush(self)
	}

	class PiVideoStream #5555FF {
		+ CaptureStream: picamera.capture_continuous
		+ PreviewStream: picamera.capture_continuous
		+ CaptureArray: PiYArray
		+ PreviewArray: PiYArray
		+ CaptureFrame: numpy.array
		+ PreviewFrame: numpy.array
		+ __init(self, resolution, monochrome, framerate, effect, use_video_port)
		+ msg(self, message)
		+ run(self)
		+ initCamera(self, resolution, monochrome, framerate, effect, use_video_port)
		' 
		--Signals--
		+ signals: signalClass
		' 
		--Slots--
		+ stop(self)
		+ changeCameraSettings(self, resolution, framerate, format, effect, use_video_port)
		+ close(self)
	}

	class FPS #FF5555 {
		+ __init__()
		+ start(self)
		+ stop(self)
		+ update(self)
		+ elapsed(self)
		+ fps(self)
	}
}

package imageProcessor.py #AAAAAA {
	class WellPositionEvaluator #ff5555 {
		+ __init__(self)
		+ evaluate(self)
	}

	class ImageProcessor #55ff55 {
		+ __init__(self)
		+ msg(self, message)
        - self.enhancer = ImageEnhancer()
        - self.segmenter = ImageSegmenter()
		' 
		--Signals--
		+ signals: signalClass
		'
		--Slots--
		+ update(self, image=None)
		+ run(self)
		+ stop(self)
		+ setDetector(self, val)
	}
}
package imageEnhancer.py #AAAAAA {
	class ImageEnhancer #55ffff {
		+ __init__(self, *args, **kwargs)
		+ __del__ (self)
		+ start(self, Image)
		+ adjust_gamma(image, gamma=1.0)
		' 
		--Slots--
		+ setRotateAngle(self, val)
		+ setGamma(self, val)
		+ setClaheClipLimit(self, val)
		+ setCropXp1(self, val)
		+ setCropXp2(self, val)
		+ setCropYp1(self, val)
		+ setCropYp2(self, val)
	}
}

package imageSegmenter.py #AAAAAA {
	class ImageSegmenter #5555ff {
		+ __init__(self, *args, **kwargs)
		+ __del__(self
		+ start(self, Image)
		+ moving_average(x, N=5)
		+ find1DGrid(data, N)
	}

}

'-------------------------------------------------------------signal.py
package signal.py #AAAAAA {
	class signalClass #FF5555 {
		--Signals--
		mes = Signal(str) 
		error = Signal(tuple)
		result = Signal(np.ndarray)
		finished = Signal()
		resultBlobs = Signal(np.ndarray, list)
		prvReady = Signal()
		capReady = Signal()
		previewUpdated = Signal()
		captureUpdated = Signal()
		previewRawUpdated = Signal()
		captureRawUpdated = Signal()
		signal_rdy_calibrator = Signal()
		signal_rdy_positioner = Signal(np.ndarray)
		signal_rdy_batchrun = Signal()    
		snapshot_requested = Signal(str)
		process_active = Signal()
		process_inactive = Signal()
		target_located = Signal(tuple)
		well_located = Signal(tuple)
		well_unknown = Signal()
		stm_read_request = Signal()
		first_move = Signal()
		batch_active = Signal()
		batch_inactive = Signal()
		windowClosing = Signal()
	}
}


'-------------------------------------------------------------Notes
note "PreviewFrame and CaptureFrame\nupon result signal\nand snapshot_requested" as N1
ImageProcessor .up. N1
N1 .down. Scanner
N1 .down. BatchProcessor

note "Process picture on\nPrvReady or capReady signal" as N2
PiVideoStream ..right. N2
N2 .. ImageProcessor

note "Used by many more classes" as N3
N3 .up. signalClass

'-------------------------------------------------------------arrows
'######################'
'### BatchProcessor ###'
'######################'
'signalClass -right-* " 1 " BatchProcessor
StepperWellPositioning -down-* " 1 " BatchProcessor

'##############################'
'### StepperWellPositioning ###'
'##############################'
'signalClass -right-* " 1 " StepperWellPositioning
StepperControl -right-* " 1 " StepperWellPositioning
WellPositionEvaluator -right-* " 1 " StepperWellPositioning

'######################'
'### ImageProcessor ###'
'######################'
'signalClass -right-* " 1 " imageProcessor
ImageEnhancer -down-* ImageProcessor
ImageSegmenter -down-* ImageProcessor

'#####################'
'### PiVideoStream ###'
'#####################'
'signalClass -right-* " 1 " PiVideoStream
PiYArray -up-* " 2 " PiVideoStream
FPS -up-* " 1 " PiVideoStream

'###################'
'### GcodeSerial ###'
'###################'
'signalClass -right-* " 1 " GcodeSerial

'######################'
'### StepperControl ###'
'######################'
'signalClass -right-* " 1 " StepperControl
GcodeSerial -down-* " 1 " StepperControl

'##################'
'### MainWindow ###'
'##################'
signalClass -down-* " 1 " MainWindow
Scanner -right-* " 1 " MainWindow

'###############'
'### Scanner ###'
'###############'
'signalClass -right-* " 1 " Scanner

@enduml	