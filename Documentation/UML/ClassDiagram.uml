@startuml

title Well plate reader - class diagram

'skinparam classAttributeIconSize 0

'class MainWindow 

'-------------------------------------------------------------main.py

package main.py #AAAAAA {
	class MainWindow #ffff55  {
		+ settings = QSettings
		+ settings_batch = QSettings
		+ Well_Map: numpy.array
		+ Well_Targets: numpy.array
		+ __init__(self)
		+ msg(self, message)
		+ createBatchGroupBox(self): self.batchGroupBox
		+ createManualGroupBox(self): self.manualGroupBox
		+ createLogWindow(self): self.logGroupBox
		' + createVideoWindow(self): self.videoGroupBox
		+ wellInitialisation(self)
		+ openSettingsIniFile(self)
		+ openBatchIniFile(self)
		'
		--Signals--
		+ signals: signalCommunication
		'
		--Slots--
		+ LogWindowInsert(self, message)
		+ doxygen(self)
	}

	class Scanner #FF55FF {
		+ preview: numpy.array
		+ capture: numpy.array
		+ __init__(self)
		+ createVideoWindow(self)
		+ msg(self, message)
		'
		--Signals--
		+ signals: signalCommunication
		--Slots--
		+ reader(self)
		+ prvUpdate(self, image=None
		+ capUpdate(self, image=None))
	}
}

'-------------------------------------------------------------signal.py
package signal.py #AAAAAA {
	class signalCommunication #FF5555 {
		+ sig: Signal
	}
}

'-------------------------------------------------------------serial_printhat.py
package serial_printhat.py #AAAAAA {
	class GcodeSerial #ffff55 {
		+ ins: int
		+ connectionState: bool
		+ __init__(self)
		+ msg(self, message)
		+ getConnectionState(self): self.connectionState
		+ setConnectionState(self, conState)
		+ connect(self, port)
		+ executeGcode(self, gcode_string)
		+ readPort(self)
		+ wait_ms(self, milliseconds)
		+ disconnect(self)
		'
		--Signals--
		+ message: signalCommunication
	}
}

'-------------------------------------------------------------
package stepper.py #AAAAAA {
	class BatchProcessor #FF5555 {

	}
	
	class StepperControl #55FF55 {
		- self.position_x: float
		- self.position_y: float
		+__init__(self)
		+ msg(self, message)
		+ getPositionX(self): self.position_x
		+ getPositionY(self): self.position_y
		+ setPositionX(self, x_pos)
		+ setPositionY(self, y_pos)
		+ <depricated> gotoX(self, x_pos)
		+ <depricated> gotoY(self, y_pos)
		'
		--Signals--
		+ message: signalCommunication
		'
		--Slots--
		+ getPositionFromSTM(self)
		+ homeXY(self)
		+ gotoXY(self, x_pos, y_pos)
		+ turnUp(self)
		+ turnLeft(self)
		+ turnRight(self)
		+ turnDown(self)
		+ firmwareRestart(self)
		+ emergencyBreak(self)
	}

	class StepperWellPositioning #5555FF {
		+ stepper_control: StepperControl
		+ current_well_row: int
    	+ current_well_column: int
		+ GeneralEventLoop: QEventLoop
		+ __init__(self, steppers)
		+ msg(self, message)
		+ reset_current_well(self)
		+ set_current_well(self, column, row)
		+ get_current_well(self): self.current_well_column, self.current_well_row
		+ wait_ms(self, milliseconds)
		'
		--Signals--
		+ message: signalCommunication
		'
		--Slots--
		+ goto_well(self, row, column)
		
	}	
}

package PiCam.py #AAAAAA {
	class PiYArray #55FF55 {
		+ __init__(self, camera, size)
		+ flush(self)
	}

	class PiVideoStream #5555FF {
		+ CaptureStream: picamera.capture_continuous
		+ PreviewStream: picamera.capture_continuous
		+ CaptureArray: PiYArray
		+ PreviewArray: PiYArray
		+ CaptureFrame: numpy.array
		+ PreviewFrame: numpy.array
		+ __init(self, resolution, monochrome, framerate, effect, use_video_port)
		+ msg(self, message)
		+ run(self)
		+ initCamera(self, resolution, monochrome, framerate, effect, use_video_port)
		' 
		--Signals--
		+ signals: signal.signalClass()
		' 
		--Slots--
		+ stop(self)
		+ changeCameraSettings(self, resolution, framerate, format, effect, use_video_port)
	}
}

package imageProcessor.py #AAAAAA {
	class ImageProcessor #55ff55 {
		+ __init__(self)
		+ __del__(self)
		+ msg(self, message)
		' 
		--Signals--
		+ signals: signal.signalClass()
		'
		--Slots--
		+ update(self, image=None)
		+ run(self)
		+ stop(self)
		+ setDetector(self, val)
}

	class WellPositionEvaluator #ff5555 {
		+ __init__(self)
		+ evaluate(self)
	}
}
package imageEnhancer.py #AAAAAA {
	class ImageEnhancer #55ffff {
		+ __init__(self, *args, **kwargs)
		+ __del__ (self)
		+ start(self, Image)
		+ adjust_gamma(image, gamma=1.0)
		' 
		--Slots--
		+ setRotateAngle(self, val)
		+ setGamma(self, val)
		+ setClaheClipLimit(self, val)
		+ setCropXp1(self, val)
		+ setCropXp2(self, val)
		+ setCropYp1(self, val)
		+ setCropYp2(self, val)
	}
}

package imageSegmenter.py #AAAAAA {
	class ImageSegmenter #5555ff {
		+ __init__(self, *args, **kwargs)
		+ __del__(self
		+ start(self, Image)
		+ moving_average(x, N=5)
		+ find1DGrid(data, N)
	}

}

'-------------------------------------------------------------Notes
note "PreviewFrame and CaptureFrame upon result signal" as N1
ImageProcessor .. N1
N1 .. Scanner

note "Process picture on PrvReady signal" as N2
PiVideoStream ..right. N2
N2 .. ImageProcessor

'-------------------------------------------------------------arrows
StepperControl -down-* " 1 " StepperWellPositioning
signalCommunication -right-* " 1 " StepperControl
signalCommunication -right-* " 1 " StepperWellPositioning
signalCommunication -right-* " 1 " MainWindow
Scanner -right-* " 1 " MainWindow
PiYArray -up-* " 2 " PiVideoStream
GcodeSerial -down-* StepperControl
ImageEnhancer -up-* ImageProcessor
ImageSegmenter -right-* ImageProcessor

@enduml	